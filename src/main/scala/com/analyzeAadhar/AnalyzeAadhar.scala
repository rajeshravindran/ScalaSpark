

import org.apache.spark
import org.apache.spark.sql
import org.apache.spark.sql.SparkSession
import org.apache.spark.sql.functions
import org.apache.spark.sql.functions._
import org.apache.spark.sql.types.{IntegerType, StringType, StructField, StructType}


case class AadharSchema (
                          REGISTRAR:String,
                          ENROLMENT_AGENCY:String,
                          STATE:String,
                          DISTRICT:String,
                          SUB_DISTRICT:String,
                          PIN_CODE:String,
                          GENDER:String,
                          AGE:Int,
                          AADHAAR_GENERATED:Int,
                          ENROLMENT_REJECTED:Int,
                          RESIDENTS_PROVIDING_EMAIL:Int,
                          RESIDENTS_PROVIDING_MOBILE_NUMBER:Int
                        )

val aadharSchema = StructType (
  StructField("REGISTRAR", StringType, true)::
    StructField("ENROLMENT_AGENCY", StringType, true)::
    StructField("STATE", StringType, true)::
    StructField("DISTRICT", StringType, true)::
    StructField("SUB_DISTRICT", StringType, true)::
    StructField("PIN_CODE", StringType, true)::
    StructField("GENDER", StringType, true)::
    StructField("AGE", IntegerType, true)::
    StructField("AADHAAR_GENERATED", IntegerType, true)::
    StructField("ENROLMENT_REJECTED", IntegerType, true)::
    StructField("RESIDENTS_PROVIDING_EMAIL", IntegerType, true)::
    StructField("RESIDENTS_PROVIDING_MOBILE_NUMBER", IntegerType, true)::Nil
)

object AadharAnalysis{
  //val conf= new SparkConf().setAppName("Aadhar Data Analysis").setMaster("local")
  val spark =SparkSession.builder().appName("Aadhar Data Analysis").master("local[*]").enableHiveSupport().getOrCreate()
  //val sqlCntxt = new Spa(conf)

  import spark.implicits._

  val filePath = "/Users/greeshma/ScalaSpark/data/UIDAI-ENR-DETAIL-20170308.csv"


  def main(args: Array): Unit ={

    val aadharDF = spark.read.format("csv").schema(aadharSchema).option("header","true").load(filePath).as[AadharSchema]

    aadharDF.createOrReplaceTempView("AADHAR_DATA")

    /*
    *
    * Count the number of Identities generated in each state
    *
    */
    //STATEWISE AADHAR REGISTRAION COUNT AGGREGATION DIRECTLY ON DATAFRAME
    val stateWiseAadharGenerated = aadharDF.groupBy("State").sum("AADHAAR_GENERATED").alias("AADHAAR_GENERATED_COUNT").orderBy("STATE")

    //STATEWISE AADHAR REGISTRAION COUNT AGGREGATION USING SQL
    val stateWiseAadharGeneratedSQL = spark.sql("SELECT STATE, SUM(AADHAAR_GENERATED) FROM AADHAR_DATA GROUP BY State ORDER BY State")

    /*
    *
    * Count the number of Identities generated by each Enrollment Agency
    *
    */
    val enrollAgencyAadharGenerated = aadharDF.groupBy("ENROLMENT_AGENCY").sum("AADHAAR_GENERATED").orderBy("ENROLMENT_AGENCY")
    val enrollAgencyAadharGeneratedSQL = spark.sql("select ENROLMENT_AGENCY, Sum(AADHAAR_GENERATED) from AADHAR_DATA group by ENROLMENT_AGENCY order by ENROLMENT_AGENCY")

    /*
    *
    * GENDER WISE SORTING PER DISTRICT
    *
    */

    val SQL=
      """
         SELECT DISTRICT,
         COUNT(CASE WHEN GENDER = 'M' THEN 1 END) AS MALE_COUNT,
         COUNT(CASE WHEN GENDER = 'F' THEN 1 END) AS FEMALE_COUNT,
         SUM(CASE WHEN GENDER = 'M' THEN AADHAAR_GENERATED END) AS MALE_AADHAR_GENERATED,
         SUM(CASE WHEN GENDER = 'F' THEN AADHAAR_GENERATED END) AS FEMALE_AADHAR_GENERATED,
         SUM(CASE WHEN GENDER = 'M' THEN ENROLMENT_REJECTED END) AS MALE_AADHAR_REJECTED,
         SUM(CASE WHEN GENDER = 'F' THEN ENROLMENT_REJECTED END) AS FEMALE_AADHAR_REJECTED
         FROM AADHAR_DATA GROUP BY DISTRICT ORDER BY DISTRICT
      """.stripMargin

    val maleFemaleDistributionSQL = spark.sql(SQL)


    var maleFemaleDistribution = aadharDF.select("REGISTRAR", "ENROLMENT_AGENCY", "STATE", "DISTRICT", "SUB_DISTRICT", "PIN_CODE", "GENDER", "AGE", "AADHAAR_GENERATED", "ENROLMENT_REJECTED", "RESIDENTS_PROVIDING_EMAIL", "RESIDENTS_PROVIDING_MOBILE_NUMBER").groupBy("DISTRICT")
      .agg(
        count( lit(1).alias("OVERALL_COUNT")),
        sum(when(col("GENDER") === "M", 1).otherwise(0).alias("MALE_COUNT")),
        sum(when(col("GENDER") === "F", 1).otherwise(0).alias("FEMALE_COUNT"))
      ).orderBy("DISTRICT")

  }



}
